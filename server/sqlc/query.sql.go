// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCache = `-- name: CreateCache :one
INSERT INTO tbl_cache (
  key, value, created
) VALUES (
  $1, $2, $3
)
RETURNING key, value, created
`

type CreateCacheParams struct {
	Key     string
	Value   pgtype.Text
	Created pgtype.Timestamptz
}

func (q *Queries) CreateCache(ctx context.Context, arg CreateCacheParams) (TblCache, error) {
	row := q.db.QueryRow(ctx, createCache, arg.Key, arg.Value, arg.Created)
	var i TblCache
	err := row.Scan(&i.Key, &i.Value, &i.Created)
	return i, err
}

const deleteCache = `-- name: DeleteCache :exec
DELETE FROM tbl_cache
WHERE key = $1
`

func (q *Queries) DeleteCache(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteCache, key)
	return err
}

const getCache = `-- name: GetCache :one
SELECT key, value, created FROM tbl_cache
WHERE key = $1 LIMIT 1
`

func (q *Queries) GetCache(ctx context.Context, key string) (TblCache, error) {
	row := q.db.QueryRow(ctx, getCache, key)
	var i TblCache
	err := row.Scan(&i.Key, &i.Value, &i.Created)
	return i, err
}

const listSymbols = `-- name: ListSymbols :many
SELECT id, symbol, full_name FROM tbl_seven_fifty
ORDER BY id ASC
`

func (q *Queries) ListSymbols(ctx context.Context) ([]TblSevenFifty, error) {
	rows, err := q.db.Query(ctx, listSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblSevenFifty
	for rows.Next() {
		var i TblSevenFifty
		if err := rows.Scan(&i.ID, &i.Symbol, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCache = `-- name: UpdateCache :exec
UPDATE tbl_cache
  set value = $2
WHERE key = $1
`

type UpdateCacheParams struct {
	Key   string
	Value pgtype.Text
}

func (q *Queries) UpdateCache(ctx context.Context, arg UpdateCacheParams) error {
	_, err := q.db.Exec(ctx, updateCache, arg.Key, arg.Value)
	return err
}
